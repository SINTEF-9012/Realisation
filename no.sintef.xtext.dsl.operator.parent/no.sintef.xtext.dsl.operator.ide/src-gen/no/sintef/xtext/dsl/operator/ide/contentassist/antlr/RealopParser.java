/*
 * generated by Xtext 2.9.2
 */
package no.sintef.xtext.dsl.operator.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import no.sintef.xtext.dsl.operator.ide.contentassist.antlr.internal.InternalRealopParser;
import no.sintef.xtext.dsl.operator.services.RealopGrammarAccess;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class RealopParser extends AbstractContentAssistParser {

	@Inject
	private RealopGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalRealopParser createParser() {
		InternalRealopParser result = new InternalRealopParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getLogicAccess().getAlternatives(), "rule__Logic__Alternatives");
					put(grammarAccess.getPredicatesAccess().getAlternatives(), "rule__Predicates__Alternatives");
					put(grammarAccess.getOperatorAccess().getGroup(), "rule__Operator__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getTerminalExpressionAccess().getGroup(), "rule__TerminalExpression__Group__0");
					put(grammarAccess.getPredicateAccess().getGroup(), "rule__Predicate__Group__0");
					put(grammarAccess.getRealopAccess().getOperatorAssignment(), "rule__Realop__OperatorAssignment");
					put(grammarAccess.getOperatorAccess().getNameAssignment_1(), "rule__Operator__NameAssignment_1");
					put(grammarAccess.getOperatorAccess().getExp_preAssignment_5(), "rule__Operator__Exp_preAssignment_5");
					put(grammarAccess.getOperatorAccess().getExp_postAssignment_9(), "rule__Operator__Exp_postAssignment_9");
					put(grammarAccess.getExpressionAccess().getLhsAssignment_0(), "rule__Expression__LhsAssignment_0");
					put(grammarAccess.getExpressionAccess().getRhsAssignment_1(), "rule__Expression__RhsAssignment_1");
					put(grammarAccess.getTerminalExpressionAccess().getOpAssignment_0(), "rule__TerminalExpression__OpAssignment_0");
					put(grammarAccess.getTerminalExpressionAccess().getRhsAssignment_1(), "rule__TerminalExpression__RhsAssignment_1");
					put(grammarAccess.getPredicateAccess().getNegateAssignment_0(), "rule__Predicate__NegateAssignment_0");
					put(grammarAccess.getPredicateAccess().getPredicateAssignment_1(), "rule__Predicate__PredicateAssignment_1");
					put(grammarAccess.getPredicateAccess().getNameAssignment_3(), "rule__Predicate__NameAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalRealopParser typedParser = (InternalRealopParser) parser;
			typedParser.entryRuleRealop();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RealopGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RealopGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
